const Int_t nptBins = 100;
Double_t ptBds4Corr[nptBins+1] =
{
	0,0.05,0.1,0.15,0.2,0.25,0.3,0.35,0.4,0.45,0.5,0.55,0.6,0.65,0.7,0.75,0.8,0.85,0.9,0.95,1,1.05,1.1,1.15,1.2,1.25,1.3,1.35,1.4,1.45,1.5,1.55,1.6,1.65,1.7,1.75,1.8,1.85,1.9,1.95,2,2.05,2.1,2.15,2.2,2.25,2.3,2.35,2.4,2.45,2.5,2.55,2.6,2.65,2.7,2.75,2.8,2.85,2.9,2.95,3,3.05,3.1,3.15,3.2,3.25,3.3,3.35,3.4,3.45,3.5,3.55,3.6,3.65,3.7,3.75,3.8,3.85,3.9,3.95,4,4.05,4.1,4.15,4.2,4.25,4.3,4.35,4.4,4.45,4.5,4.55,4.6,4.65,4.7,4.75,4.8,4.85,4.9,4.95,5
};


//const Int_t nptBins = 60;
//Double_t ptBds4Corr[nptBins+1] =
//{
//	0, 0.05, 0.10, 0.15, 0.20, 0.25, 0.30, 0.35, 0.40, 0.45, 0.50, 0.55, 0.60, 0.65, 0.70, 0.75, 0.80, 0.85, 0.90, 0.95, 1.0, //21
//	1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, //10
//	2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, //10
//	3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, //10
//	4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8, 4.9, 5.0  //10
//};
//--------------------------------------------------------------------------------------------------------------
const Int_t  nMBins_ct0 = 141;//500
Double_t mBds4Corr_ct0[nMBins_ct0+1] = 
{
	//0,0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09,0.1,0.11,0.12,0.13,0.14,0.15,0.16,0.17,0.18,0.19,0.2,0.21,0.22,0.23,0.24,0.25,0.26,0.27,0.28,0.29,0.3,0.31,0.32,0.33,0.34,0.35,0.36,0.37,0.38,0.39,0.4,0.41,0.42,0.43,0.44,0.45,0.46,0.47,0.48,0.49,0.5,0.51,0.52,0.53,0.54,0.55,0.56,0.57,0.58,0.59,0.6,0.61,0.62,0.63,0.64,0.65,0.66,0.67,0.68,0.69,0.7,0.71,0.72,0.73,0.74,0.75,0.76,0.77,0.78,0.79,0.8,0.81,0.82,0.83,0.84,0.85,0.86,0.87,0.88,0.89,0.9,0.91,0.92,0.93,0.94,0.95,0.96,0.97,0.98,0.99,1,1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16,1.17,1.18,1.19,1.2,1.21,1.22,1.23,1.24,1.25,1.26,1.27,1.28,1.29,1.3,1.31,1.32,1.33,1.34,1.35,1.36,1.37,1.38,1.39,1.4,1.41,1.42,1.43,1.44,1.45,1.46,1.47,1.48,1.49,1.5,1.51,1.52,1.53,1.54,1.55,1.56,1.57,1.58,1.59,1.6,1.61,1.62,1.63,1.64,1.65,1.66,1.67,1.68,1.69,1.7,1.71,1.72,1.73,1.74,1.75,1.76,1.77,1.78,1.79,1.8,1.81,1.82,1.83,1.84,1.85,1.86,1.87,1.88,1.89,1.9,1.91,1.92,1.93,1.94,1.95,1.96,1.97,1.98,1.99,2,2.01,2.02,2.03,2.04,2.05,2.06,2.07,2.08,2.09,2.1,2.11,2.12,2.13,2.14,2.15,2.16,2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32,2.33,2.34,2.35,2.36,2.37,2.38,2.39,2.4,2.41,2.42,2.43,2.44,2.45,2.46,2.47,2.48,2.49,2.5,2.51,2.52,2.53,2.54,2.55,2.56,2.57,2.58,2.59,2.6,2.61,2.62,2.63,2.64,2.65,2.66,2.67,2.68,2.69,2.7,2.71,2.72,2.73,2.74,2.75,2.76,2.77,2.78,2.79,2.8,2.81,2.82,2.83,2.84,2.85,2.86,2.87,2.88,2.89,2.9,2.91,2.92,2.93,2.94,2.95,2.96,2.97,2.98,2.99,3,3.01,3.02,3.03,3.04,3.05,3.06,3.07,3.08,3.09,3.1,3.11,3.12,3.13,3.14,3.15,3.16,3.17,3.18,3.19,3.2,3.21,3.22,3.23,3.24,3.25,3.26,3.27,3.28,3.29,3.3,3.31,3.32,3.33,3.34,3.35,3.36,3.37,3.38,3.39,3.4,3.41,3.42,3.43,3.44,3.45,3.46,3.47,3.48,3.49,3.5,3.51,3.52,3.53,3.54,3.55,3.56,3.57,3.58,3.59,3.6,3.61,3.62,3.63,3.64,3.65,3.66,3.67,3.68,3.69,3.7,3.71,3.72,3.73,3.74,3.75,3.76,3.77,3.78,3.79,3.8,3.81,3.82,3.83,3.84,3.85,3.86,3.87,3.88,3.89,3.9,3.91,3.92,3.93,3.94,3.95,3.96,3.97,3.98,3.99,4,4.01,4.02,4.03,4.04,4.05,4.06,4.07,4.08,4.09,4.1,4.11,4.12,4.13,4.14,4.15,4.16,4.17,4.18,4.19,4.2,4.21,4.22,4.23,4.24,4.25,4.26,4.27,4.28,4.29,4.3,4.31,4.32,4.33,4.34,4.35,4.36,4.37,4.38,4.39,4.4,4.41,4.42,4.43,4.44,4.45,4.46,4.47,4.48,4.49,4.5,4.51,4.52,4.53,4.54,4.55,4.56,4.57,4.58,4.59,4.6,4.61,4.62,4.63,4.64,4.65,4.66,4.67,4.68,4.69,4.7,4.71,4.72,4.73,4.74,4.75,4.76,4.77,4.78,4.79,4.8,4.81,4.82,4.83,4.84,4.85,4.86,4.87,4.88,4.89,4.9,4.91,4.92,4.93,4.94,4.95,4.96,4.97,4.98,4.99,5

	0, 0.01, 0.02, 0.03, 0.04, 0.055, 0.06, 0.07, 0.08, 0.09, 0.10, //11
	0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.20, //10
	0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.30, //10
	0.31, 0.32, 0.33, 0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.40, //10
	0.41, 0.42, 0.43, 0.44, 0.45, 0.46, 0.47, 0.48, 0.49, 0.50, //10
	0.52, 0.54, 0.56, 0.58, 0.60, 0.62, 0.64, 0.66, 0.68, 0.70, //10
	0.72,0.725,0.73,0.735,0.74,0.745,0.75,0.755,0.76,0.765,0.77,0.775,0.78,0.785,0.79,0.795,0.8,0.805,0.81,0.815,0.82,//21
	0.84, 0.86, 0.88, 0.90, 0.92, 0.94,                    //6
	0.96,0.965,0.97,0.975,0.98,0.985,0.99,0.995,1,1.005,1.01,1.015,1.02,1.025,1.03,1.035,1.04,1.045,1.05,1.055,1.06,  //21
	1.08, 1.10, 1.15, 1.20, 1.30, 1.40, 1.50, 1.60, 1.70, 1.80, 1.90, //11
	2.00, 2.10, 2.20, 2.30, 2.40, 2.50, 2.60, 2.70, 2.80, 2.90, //10
	2.95, 3.00, 3.05, 3.06, 3.08, 3.10, 3.12, 3.14, 3.16, 3.20, 3.30, 3.50//12
};

const Int_t  nMBins_ct1 = 141;
Double_t mBds4Corr_ct1[nMBins_ct1+1] = 
{
	0, 0.01, 0.02, 0.03, 0.04, 0.055, 0.06, 0.07, 0.08, 0.09, 0.10, //11
	0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.20, //10
	0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.30, //10
	0.31, 0.32, 0.33, 0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.40, //10
	0.41, 0.42, 0.43, 0.44, 0.45, 0.46, 0.47, 0.48, 0.49, 0.50, //10
	0.52, 0.54, 0.56, 0.58, 0.60, 0.62, 0.64, 0.66, 0.68, 0.70, //10
	0.72,0.725,0.73,0.735,0.74,0.745,0.75,0.755,0.76,0.765,0.77,0.775,0.78,0.785,0.79,0.795,0.8,0.805,0.81,0.815,0.82,//21
	0.84, 0.86, 0.88, 0.90, 0.92, 0.94,                    //6
	0.96,0.965,0.97,0.975,0.98,0.985,0.99,0.995,1,1.005,1.01,1.015,1.02,1.025,1.03,1.035,1.04,1.045,1.05,1.055,1.06,  //21
	1.08, 1.10, 1.15, 1.20, 1.30, 1.40, 1.50, 1.60, 1.70, 1.80, 1.90, //11
	2.00, 2.10, 2.20, 2.30, 2.40, 2.50, 2.60, 2.70, 2.80, 2.90, //10
	2.95, 3.00, 3.05, 3.06, 3.08, 3.10, 3.12, 3.14, 3.16, 3.20, 3.30, 3.50//12
};
const Int_t  nMBins_ct2 = 141;
Double_t mBds4Corr_ct2[nMBins_ct2+1] = 
{
	0, 0.01, 0.02, 0.03, 0.04, 0.055, 0.06, 0.07, 0.08, 0.09, 0.10, //11
	0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.20, //10
	0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.30, //10
	0.31, 0.32, 0.33, 0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.40, //10
	0.41, 0.42, 0.43, 0.44, 0.45, 0.46, 0.47, 0.48, 0.49, 0.50, //10
	0.52, 0.54, 0.56, 0.58, 0.60, 0.62, 0.64, 0.66, 0.68, 0.70, //10
	0.72,0.725,0.73,0.735,0.74,0.745,0.75,0.755,0.76,0.765,0.77,0.775,0.78,0.785,0.79,0.795,0.8,0.805,0.81,0.815,0.82,//21
	0.84, 0.86, 0.88, 0.90, 0.92, 0.94,                    //6
	0.96,0.965,0.97,0.975,0.98,0.985,0.99,0.995,1,1.005,1.01,1.015,1.02,1.025,1.03,1.035,1.04,1.045,1.05,1.055,1.06,  //21
	1.08, 1.10, 1.15, 1.20, 1.30, 1.40, 1.50, 1.60, 1.70, 1.80, 1.90, //11
	2.00, 2.10, 2.20, 2.30, 2.40, 2.50, 2.60, 2.70, 2.80, 2.90, //10
	2.95, 3.00, 3.05, 3.06, 3.08, 3.10, 3.12, 3.14, 3.16, 3.20, 3.30, 3.50//12
};
const Int_t  nMBins_ct3 = 141;
Double_t mBds4Corr_ct3[nMBins_ct3+1] = 
{
	0, 0.01, 0.02, 0.03, 0.04, 0.055, 0.06, 0.07, 0.08, 0.09, 0.10, //11
	0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.20, //10
	0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.30, //10
	0.31, 0.32, 0.33, 0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.40, //10
	0.41, 0.42, 0.43, 0.44, 0.45, 0.46, 0.47, 0.48, 0.49, 0.50, //10
	0.52, 0.54, 0.56, 0.58, 0.60, 0.62, 0.64, 0.66, 0.68, 0.70, //10
	0.72,0.725,0.73,0.735,0.74,0.745,0.75,0.755,0.76,0.765,0.77,0.775,0.78,0.785,0.79,0.795,0.8,0.805,0.81,0.815,0.82,//21
	0.84, 0.86, 0.88, 0.90, 0.92, 0.94,                    //6
	0.96,0.965,0.97,0.975,0.98,0.985,0.99,0.995,1,1.005,1.01,1.015,1.02,1.025,1.03,1.035,1.04,1.045,1.05,1.055,1.06,  //21
	1.08, 1.10, 1.15, 1.20, 1.30, 1.40, 1.50, 1.60, 1.70, 1.80, 1.90, //11
	2.00, 2.10, 2.20, 2.30, 2.40, 2.50, 2.60, 2.70, 2.80, 2.90, //10
	2.95, 3.00, 3.05, 3.06, 3.08, 3.10, 3.12, 3.14, 3.16, 3.20, 3.30, 3.50//12
};


//binning for Physics excess yields
const Int_t  nMBins4Phys_ct0 = 27;
Double_t mBds4Phys_ct0[nMBins_ct0+1] =
{
	0.0, 0.055, 0.06, 0.07, 0.08, 0.09, 0.10,0.12, 0.20, 0.30, 0.45, 0.60, //12
	0.70,  0.76, 0.80, 0.86, 0.96, //4
	1.040, 1.20, 1.50, 1.90, //4
	2.50, 2.95, 3.060, 3.10, 3.16, 3.30, 3.50  //7
};

////binning for Physics excess yields
//const Int_t  nMBins4Phys_ct0 = 26;
//Double_t mBds4Phys_ct0[nMBins_ct0+1] =
//{
//	0.0, 0.055, 0.06, 0.07, 0.08, 0.09, 0.10,0.12, 0.20, 0.30, 0.45, 0.60, //12
//	0.70,  0.76, 0.80, 0.86, //4
//	1.040, 1.20, 1.50, 1.90, //4
//	2.50, 2.95, 3.060, 3.10, 3.16, 3.30, 3.50  //7
//};

//binning for Physics excess yields, for linear compare omega and phi signals btw data and ckt, used for first signals
const Int_t  nMBins4Vm_ct0 = 20+40; //22+40;
Double_t mBds4Vm_ct0[nMBins_ct0+1] =
{
	0.0, 0.055, 0.06, 0.07, 0.08, 0.09, 0.10,0.12, 0.20, 0.30, 0.45, 0.60, //12
	0.62, 0.64, 0.68,
	0.70, 0.72,0.73,0.74,0.75,0.755,0.76,0.765,0.77,0.775,0.78,0.785,0.79,0.795,0.8,0.81,0.82,//21
	0.84, 0.88, 0.92, 0.94,                    //6
	//0.84, 0.86, 0.88, 0.90, 0.92, 0.94,                    //6
	0.96,0.97,0.98,0.99,1,1.005,1.01,1.015,1.02,1.025,1.03,1.035,1.04,1.06,  //21
	1.10, 1.15, 1.20, 1.50, 1.90, //5
	2.50, 2.95, 3.060, 3.10, 3.16, 3.30, 3.50  //7
	//2.50, 2.80, 3.015, 3.060, 3.085, 3.110, 3.130, 3.16, 3.50  //9
};




////binning for Physics excess yields, for linear compare omega and phi signals btw data and ckt
//const Int_t  nMBins4Vm_ct0 = 14+39; //22+40;
//Double_t mBds4Vm_ct0[nMBins_ct0+1] =
//{
//	0.0, 0.055, 0.06, 0.07, 0.08, 0.09, 0.10,0.12, 0.20, 0.30, 0.45, 0.60, //12
//	0.62, 0.64, 0.68,
//	0.70, 0.72,0.74,0.76,0.77,0.78,0.79,0.8,0.81,0.82,//21
//	0.84, 0.88, 0.92, 0.94,                    //6
//	//0.84, 0.86, 0.88, 0.90, 0.92, 0.94,                    //6
//	0.96,0.98,0.99,1.0,1.005,1.01,1.015,1.02,1.025,1.03,1.035,1.04,1.06,  //21
//	1.10, 1.15, 1.20, 1.50, 1.90, //5
//	2.50, 2.95, 3.060, 3.10, 3.16, 3.30, 3.50  //7
//	//2.50, 2.80, 3.015, 3.060, 3.085, 3.110, 3.130, 3.16, 3.50  //9
//};


























//--------------------------------------------------------------------------------------------------------------
//binning for the physics in different pt bin in 0-80%
//--------------------------------------------------------------------------------------------------------------
const Int_t  nMBins_ipt0 = 43;
Double_t BinBounds_ipt0[nMBins_ipt0+1] = 
{
	0, 0.05, 0.06,  0.07, 0.08, 0.09, 0.10, //11
	0.12, 0.14, 0.16, 0.18, 0.20, 0.24, 0.28, 0.34, //8
	0.42, 0.48, 0.54, 0.60, 0.66, 0.725, 0.750, 0.770, 0.780, 0.795, //10
	0.820, 0.880, 0.990, 1.010, 1.030,//5
	1.055, 1.225, 1.450, 1.800, 2.200,//5
	2.800, 3.015, //2
	3.060, 3.085, 3.110,3.130,3.16,//5
	3.31, 3.55//2
};
const Int_t  nMBins_ipt1 = 47;
Double_t BinBounds_ipt1[nMBins_ipt1+1] = 
{
	0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06,  0.07, 0.08, 0.09, 0.10, //11
	0.12, 0.14, 0.16, 0.18, 0.20, 0.24, 0.28, 0.34, //8
	0.42, 0.48, 0.54, 0.60, 0.66, 0.725, 0.750, 0.770, 0.780, 0.795, //10
	0.820, 0.880, 0.990, 1.010, 1.030,//5
	1.055, 1.225, 1.450, 1.800, 2.200,//5
	2.800, 3.015, //2
	3.060, 3.085, 3.110,3.130,3.16,//5
	3.31, 3.55//2

};
const Int_t  nMBins_ipt2 = 47;
Double_t BinBounds_ipt2[nMBins_ipt2+1] = 
{
	0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06,  0.07, 0.08, 0.09, 0.10, //11
	0.12, 0.14, 0.16, 0.18, 0.20, 0.24, 0.28, 0.34, //8
	0.42, 0.48, 0.54, 0.60, 0.66, 0.725, 0.750, 0.770, 0.780, 0.795, //10
	0.820, 0.880, 0.990, 1.010, 1.030,//5
	1.055, 1.225, 1.450, 1.800, 2.200,//5
	2.800, 3.015, //2
	3.060, 3.085, 3.110,3.130,3.16,//5
	3.31, 3.55//2

};
const Int_t  nMBins_ipt3 = 47;
Double_t BinBounds_ipt3[nMBins_ipt3+1] = 
{
	0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06,  0.07, 0.08, 0.09, 0.10, //11
	0.12, 0.14, 0.16, 0.18, 0.20, 0.24, 0.28, 0.34, //8
	0.42, 0.48, 0.54, 0.60, 0.66, 0.725, 0.750, 0.770, 0.780, 0.795, //10
	0.820, 0.880, 0.990, 1.010, 1.030,//5
	1.055, 1.225, 1.450, 1.800, 2.200,//5
	2.800, 3.015, //2
	3.060, 3.085, 3.110,3.130,3.16,//5
	3.31, 3.55//2

};
const Int_t  nMBins_ipt4 = 47;
Double_t BinBounds_ipt4[nMBins_ipt4+1] = 
{
		0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06,  0.07, 0.08, 0.09, 0.10, //11
	0.12, 0.14, 0.16, 0.18, 0.20, 0.24, 0.28, 0.34, //8
	0.42, 0.48, 0.54, 0.60, 0.66, 0.725, 0.750, 0.770, 0.780, 0.795, //10
	0.820, 0.880, 0.990, 1.010, 1.030,//5
	1.055, 1.225, 1.450, 1.800, 2.200,//5
	2.800, 3.015, //2
	3.060, 3.085, 3.110,3.130,3.16,//5
	3.31, 3.55//2
};
const Int_t  nMBins_ipt5 = 47;
Double_t BinBounds_ipt5[nMBins_ipt5+1] = 
{
		0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06,  0.07, 0.08, 0.09, 0.10, //11
	0.12, 0.14, 0.16, 0.18, 0.20, 0.24, 0.28, 0.34, //8
	0.42, 0.48, 0.54, 0.60, 0.66, 0.725, 0.750, 0.770, 0.780, 0.795, //10
	0.820, 0.880, 0.990, 1.010, 1.030,//5
	1.055, 1.225, 1.450, 1.800, 2.200,//5
	2.800, 3.015, //2
	3.060, 3.085, 3.110,3.130,3.16,//5
	3.31, 3.55//2
};

//--------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------
const double RhoMassWindow[2]   = {0.30, 0.77};
const double OmegaMassWindow[2] = {0.76, 0.80 };
const double PhiMassWindow[2]   = {0.98, 1.05};
const double IMRMassWindow[2]   = {1.1,  2.6  };
//--------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------
//this is the original bins from Cocktail
//Bins for Ratio of Data over Cocktail
const Int_t  nMBins_Ratio = 61;
Double_t BinBounds_Ratio[nMBins_Ratio+1] =
{
	0,0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09,0.1,0.11,0.125,0.16,0.21,0.28,0.4,0.51,0.63,0.73,0.78,0.785,0.79,0.795,0.86,0.9,0.95,1,
	1.01,1.015,1.02,1.025,1.03,1.04,1.08,1.15,1.24,1.425,1.65,1.825,2,2.2,2.4,2.525,2.67,
	2.825,2.975,3,3.035,3.055,3.07, 3.075,3.09,3.095,3.1,3.12,3.135,3.21,3.3,3.4,3.55,3.60
};
//--------------------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------------------
//Considering the Statistical Uncertainty, have to rebin, instead of directly use the Cocktails
//Bins for Ratio of Data over Cocktail
const Int_t  nMBins_Ratio2 = 43;
Double_t BinBounds_Ratio2[nMBins_Ratio+1] =
{
	0,0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09,0.1,0.11,0.125,0.16,0.21,0.28,0.4,0.51,//18
	0.63,0.73,0.78,0.785,0.79,0.795,0.86,1,//8
	1.01,1.015,1.02,1.025,1.03,//5
	1.08, 1.24, 1.425, 1.825, 2.4, 3.00, 3.055,3.07, 3.075,3.09,3.095,3.12,3.21//14 good enough
};
//--------------------------------------------------------------------------------------------------------------

//for the Mt Spectra
const Int_t nmtBins = 8;
Double_t mtBinBDs[nmtBins+1] =
{
	0, 0.10, 0.20, 0.4, 0.60, 0.80, 1.2, 1.8,  5.0
	//0, 0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.90, 1.0, //20
	//1.1, 1.2, 1.3, 1.5, 1.8, 2.5, 3.5, 5.0
};

const Int_t nmtBins4Phys = 8;
Double_t mtBinBDs4Phys[nmtBins4Phys+1] =
{
	0, 0.10, 0.20, 0.4, 0.60, 0.80, 1.2, 1.8,  5.0
};



